install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
devtools::install_github("IRkernel/IRkernel")
devtools::install_github("IRkernel/IRkernel")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github("IRkernel/IRkernel")
install.packages("IRkernel")
install.packages("RMySQL")
### SQL #########################################################
library(RMySQL)
db <- dbConnect(MySQL(), user="root", hots = "localhots",
password = "admin", dbname = "dbpendientes")
db <- dbConnect(MySQL(), user="root", hots = "localhots",
password = "admin", dbname = "dbpendientes")
library(DBI)
con <- dbConnect(odbc::odbc(), "MySQL Connection", timeout = 10)
dbListTables(con)
res <- dbSendQuery(con, "SELECT * FROM personas")
res
dbFetch(res)
# Realizar la consulta
res <- dbSendQuery(con, "SELECT * FROM departaments")
#Traer todos los registro de la consulta
df.personas <- dbFetch(res)
View(df.personas)
dbFetch(res)
# Realizar la consulta
res <- dbSendQuery(con, "SELECT * FROM personas")
#Traer todos los registro de la consulta
df.personas <- dbFetch(res)
View(df.personas)
View(con)
mtcars
dbWriteTable(con, "mtcars", mtcars)
# Listar las tablas
dbListTables(con)
# Nos ubicamos en el directorio de trabajo
setwd('CurosCienciasDatos/01 - Mineria de datos/BasesDatos/')
clientes <- c("Juan","Pedro","Lucas")
fechas <- as.Date(c("2017-12-27","12-11-1","2018-1-1"))
pago <- c(315,192.55,40.15)
pedido <- data.frame(clientes,fechas,pago)
clientes <- c("Juan","Pedro","Lucas")
fechas <- as.Date(c("2017-12-27","12-11-1","2018-1-1"))
pago <- c(315,192.55,40.15)
pedido <- data.frame(clientes,fechas,pago)
#Aguardando data frame tipo Rdata
save(pedido,file="Objeto1.Rdata") # Permite guardar mas de un archivo.
#Guardando dataframe tipo rds
saveRDS(pedido,file="Objeto2.rds")
#Cargar objeto Rdata
load("Objeto1.Rdata")
View(pedido)
objeto <- readRDS("base2.rds")
#Guardando dataframe tipo rds
saveRDS(pedido,file="Objeto2.rds")
clientes <- c("Juan","Pedro","Lucas")
fechas <- as.Date(c("2017-12-27","12-11-1","2018-1-1"))
pago <- c(315,192.55,40.15)
pedido <- data.frame(clientes,fechas,pago)
#Guardando dataframe tipo rds
saveRDS(pedido,file="Objeto2.rds")
#Cargar objeto RDS
objeto <- readRDS("base2.rds")
clientes <- c("Juan","Pedro","Lucas")
fechas <- as.Date(c("2017-12-27","12-11-1","2018-1-1"))
pago <- c(315,192.55,40.15)
pedido <- data.frame(clientes,fechas,pago)
#Guardando dataframe tipo rds
saveRDS(pedido,file="Objeto2.rds")
#Cargar objeto RDS
objeto <- readRDS("Objeto2.rds")
#Cargar objeto RDS
objeto <- readRDS("Objeto2.rds")
View(objeto)
#Cargar objeto RDS
objeto <- readRDS("Objeto2.rds")
#Cargar objeto RDS
readRDS("Objeto2.rds")
clientes <- c("Juan","Pedro","Lucas")
fechas <- as.Date(c("2017-12-27","12-11-1","2018-1-1"))
pago <- c(315,192.55,40.15)
# Borrar un objeto de memoria
pedido <- data.frame(clientes,fechas,pago)
remove(pedido)
factor <- factor("hola")
## Tipos de datos ##########################################
entero <- 8
real <- 7.8
booleano <- TRUE # FALSE(T, F)
caracter <- "Hola mundo"
factor <- factor("hola")
## Convertir a entre tipos de datos
as.numeric(entero)
## Convertir a entre tipos de datos
class(as.numeric(entero))
## Convertir a entre tipos de datos
real1 <- as.numeric(entero)
class(real1)
# real a enterp
entero1 <- as.integer(real)
class(entero1)
# caracter a factor
factor1 <- as.integer(caracter)
class(factor1)
# caracter a factor
factor1 <- as.factor(caracter)
class(factor1)
# División
6/5.1
# División entera
6//5.1
# Exponente
6^5
x = 4
## Vectores #####################################
vector <- c(1, 5, 84, 9, 0)
vector
vector.1 <- c("a", "b", "c")
vector.1
vector.4 <- 1:5
vector.4
# seq(inicio, fin, salto)
vector.5 <- seq(1,5,0.4)
vector.5
# Extracción de elementos de un vector
vector.1[2]
# Eliminar elementos de un vector
vector.4[-5]
matriz <- matrix(c(1,2,36,9,5,2),ncol = 3, byrow = T)
matriz
arreglo <- array(c(rep(1,5),rep(3,5),2,6), c(2,3,2))
arreglo
# Conocer el número de elementos en la matriz
m <- matrix(data=5, nr=2, nc=2)
length(m)
# Conocer la dimensión de la matriz
dim(m)
# Asignar nombres a las columnas y a las filas.
rownames(m) = c("x1","x2")
colnames(m) = c("x1","x2")
m
# Extraer elementos de una matriz y un array
matriz[2,1]
arreglo[2,1,1]
# Reasignando los valores para los elementos de una matriz
m[1,1] = 1
m[2,2] = 4
m
## Data frame #####################################################
vec_1 <- 1:5
vec_2 <- c("a", "e", "i", "o", "u")
marco.datos <- data.frame(Numeros = vec_1, Letras = vec_2)
marco.datos
# Extraer elementos de una data frame
marco.datos[,1] # Se extrae solo la columna 1
x <- 1:20
y <- rep(c("a", "b", "c", "d"),5)
df <- data.frame(x,y)
df$y
df[,"y"]
## Listas(diccionario) ##############################################################
ec_1 <- 1:5
vec_2 <- c("a", "e", "i", "o", "u")
marco.datos <- data.frame(Numeros = vec_1, Letras = vec_2)
matriz <- matrix(c(1,2,36,9,5,2),ncol = 3, byrow = T)
arreglo <- array(c(rep(1,5),rep(3,5),2,6), c(2,3,2))
lista <- list(marco.datos, matriz, arreglo)
lista
lista[1]
lista[1][1]
lista[1]
